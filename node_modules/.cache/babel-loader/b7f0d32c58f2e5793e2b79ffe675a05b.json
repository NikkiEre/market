{"ast":null,"code":"import _toConsumableArray from \"/home/nikolay/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Learn/vuejs/market/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.number.constructor.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Breadcrumbs from '@/components/Breadcrumbs/Breadcrumbs.vue';\nimport FilterCatalog from '@/components/FilterCatalog/FilterCatalog.vue';\nimport Catalog from '@/components/Catalog/Catalog.vue';\nimport Benefits from '@/components/Benifits/Benefits.vue';\nimport Subscribe from '@/components/Subscribe/Subscribe.vue';\nimport Spinner from '@/components/Spinner/Spinner.vue';\nimport Pagination from '@/components/Pagination/Pagination.vue';\nimport { fetchRequest } from '@/api/fetch';\nimport ErrorCatalog from '@/components/ErrorCatalog/ErrorCatalog.vue';\nimport store from '@/store';\nexport default {\n  components: {\n    Breadcrumbs: Breadcrumbs,\n    FilterCatalog: FilterCatalog,\n    Catalog: Catalog,\n    Benefits: Benefits,\n    Subscribe: Subscribe,\n    Spinner: Spinner,\n    ErrorCatalog: ErrorCatalog,\n    Pagination: Pagination\n  },\n  name: \"CatalogPage\",\n  data: function data() {\n    return {\n      isLoad: false,\n      isError: false,\n      items: [],\n      categories: [],\n      checkedCategories: [],\n      maxItemsInPage: 6,\n      activePage: 1\n    };\n  },\n  computed: {\n    countPages: function countPages() {\n      this.activePage = 1;\n      return Math.ceil(this.filterItemsForCategories.length / this.maxItemsInPage);\n    },\n    filterItemsForCategories: function filterItemsForCategories() {\n      var _this = this;\n\n      if (this.checkedCategories.length) {\n        return this.items.filter(function (item) {\n          if (_this.checkedCategories.includes(item.category)) {\n            return item;\n          }\n        });\n      } else {\n        return this.items;\n      }\n    },\n    filterItemsForPage: function filterItemsForPage() {\n      var newArr = _toConsumableArray(this.filterItemsForCategories).splice((this.activePage - 1) * this.maxItemsInPage, this.maxItemsInPage);\n\n      return newArr;\n    },\n    url_category: function url_category() {\n      return this.$route.params.category;\n    }\n  },\n  methods: {\n    fetchStore: function fetchStore() {\n      var _this2 = this;\n\n      this.isLoad = true;\n      var fetchStore = fetchRequest('products').then(function (res) {\n        _this2.items = res;\n      });\n      var fetchCategories = fetchRequest('products/categories').then(function (res) {\n        _this2.categories = res;\n      });\n      Promise.all([fetchStore, fetchCategories]).then(function (res) {\n        _this2.isLoad = false;\n      })[\"catch\"](function (err) {\n        _this2.isLoad = false;\n        _this2.isError = true;\n      });\n    },\n    addToCart: function addToCart(item) {\n      store.dispatch({\n        type: \"actionChangeCart\",\n        dataDispatch: {\n          item: item,\n          typeAction: \"addItemToCart\"\n        }\n      });\n    },\n    moveToItem: function moveToItem() {\n      this.$router.push(\"/item\");\n    },\n    changePage: function changePage(page) {\n      if (page === \"-\" && this.activePage > 1) {\n        this.activePage -= 1;\n      } else if (page === \"+\" && this.activePage < this.countPages) {\n        this.activePage += 1;\n      } else if (Number(page)) {\n        this.activePage = page;\n      }\n    },\n    addCheckedCategory: function addCheckedCategory(e) {\n      if (e.target.checked) {\n        this.checkedCategories.push(e.target.value);\n      } else {\n        this.checkedCategories = this.checkedCategories.filter(function (category) {\n          return category !== e.target.value;\n        });\n      }\n    }\n  },\n  created: function created() {\n    this.fetchStore();\n\n    if (this.url_category) {\n      this.checkedCategories.push(this.url_category);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAA;AACAC,4BADA;AAEAC,gCAFA;AAGAC,oBAHA;AAIAC,sBAJA;AAKAC,wBALA;AAMAC,oBANA;AAOAC,8BAPA;AAQAC;AARA,GADA;AAWAC,qBAXA;AAYAC;AACA;AACAC,mBADA;AAEAC,oBAFA;AAGAC,eAHA;AAIAC,oBAJA;AAKAC,2BALA;AAMAC,uBANA;AAOAC;AAPA;AASA,GAtBA;AAuBAC;AACAC;AACA;AACA;AACA,KAJA;AAKAC;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA,SAJA;AAKA,OANA,MAMA;AACA;AACA;AACA,KAfA;AAgBAC;AACA;;AACA;AACA,KAnBA;AAoBAC;AACA;AACA;AAtBA,GAvBA;AA+CAC;AACAC;AAAA;;AACA;AACA;AACA;AACA,OAFA;AAGA;AACA;AACA,OAFA;AAGAC;AACA;AACA,OAFA,WAEA;AACA;AACA;AACA,OALA;AAMA,KAfA;AAgBAC,aAhBA,qBAgBAC,IAhBA,EAgBA;AACAC;AAAAC;AAAAC;AAAAH;AAAAI;AAAA;AAAA;AAEA,KAnBA;AAoBAC,cApBA,wBAoBA;AACA;AACA,KAtBA;AAuBAC,cAvBA,sBAuBAC,IAvBA,EAuBA;AACA;AACA;AACA,OAFA,MAEA;AACA;AACA,OAFA,MAEA;AACA;AACA;AACA,KA/BA;AAgCAC,sBAhCA,8BAgCAC,CAhCA,EAgCA;AACA;AACA;AACA,OAFA,MAEA;AACA;AAAA;AAAA;AACA;AACA;AAtCA,GA/CA;AAuFAC;AACA;;AACA;AACA;AACA;AACA;AA5FA","names":["components","Breadcrumbs","FilterCatalog","Catalog","Benefits","Subscribe","Spinner","ErrorCatalog","Pagination","name","data","isLoad","isError","items","categories","checkedCategories","maxItemsInPage","activePage","computed","countPages","filterItemsForCategories","filterItemsForPage","url_category","methods","fetchStore","Promise","addToCart","item","store","type","dataDispatch","typeAction","moveToItem","changePage","page","addCheckedCategory","e","created"],"sourceRoot":"src/views","sources":["CatalogPage.vue"],"sourcesContent":["<template>\n    <section class=\"catalog-page\">\n        <Breadcrumbs />\n        <FilterCatalog \n            :categories=\"categories\"\n            :addCheckedCategory=\"addCheckedCategory\"\n            :checkedCategoriesProps=\"checkedCategories\"\n        />\n        <Spinner v-if=\"isLoad\"/>\n        <ErrorCatalog v-else-if=\"!isLoad && isError\" :reloadItems=\"fetchStore\" />\n        <div class=\"catalog-page__catalog\" v-else-if=\"!isLoad && !isError\">\n            <Catalog \n                :listItems=\"filterItemsForPage\"\n                :addToCart=\"addToCart\"\n                :moveToItem=\"moveToItem\"\n            />\n            <Pagination \n                :pages=\"countPages\"\n                :activePage=\"activePage\"\n                :changePage=\"changePage\"\n            />\n        </div>\n        <Benefits />\n        <Subscribe />\n    </section>\n</template>\n\n<script>\nimport Breadcrumbs from '@/components/Breadcrumbs/Breadcrumbs.vue'\nimport FilterCatalog from '@/components/FilterCatalog/FilterCatalog.vue'\nimport Catalog from '@/components/Catalog/Catalog.vue'\nimport Benefits from '@/components/Benifits/Benefits.vue'\nimport Subscribe from '@/components/Subscribe/Subscribe.vue'\nimport Spinner from '@/components/Spinner/Spinner.vue'\nimport Pagination from '@/components/Pagination/Pagination.vue'\nimport { fetchRequest } from '@/api/fetch'\nimport ErrorCatalog from '@/components/ErrorCatalog/ErrorCatalog.vue'\nimport store from '@/store'\n\nexport default {\n  components: { \n        Breadcrumbs, \n        FilterCatalog,\n        Catalog,\n        Benefits,\n        Subscribe,\n        Spinner,\n        ErrorCatalog,\n        Pagination\n    },\n    name: \"CatalogPage\",\n    data: function() {\n        return ({\n            isLoad: false,\n            isError: false,\n            items: [],\n            categories: [],\n            checkedCategories: [],\n            maxItemsInPage: 6,\n            activePage: 1,\n        })\n    },\n    computed: {\n        countPages: function() {\n            this.activePage = 1;\n            return Math.ceil(this.filterItemsForCategories.length / this.maxItemsInPage);\n        },\n        filterItemsForCategories: function() {\n            if(this.checkedCategories.length) {\n                return this.items.filter((item) => {\n                    if(this.checkedCategories.includes(item.category)) {\n                        return item;\n                    }\n                })\n            } else {\n                return this.items;\n            }\n        },\n        filterItemsForPage: function() {\n            const newArr = [...this.filterItemsForCategories].splice((this.activePage - 1) * this.maxItemsInPage, this.maxItemsInPage);\n            return newArr;\n        },\n        url_category: function() {\n            return this.$route.params.category;\n        }\n    },\n    methods: {\n        fetchStore: function() {\n            this.isLoad = true;\n            const fetchStore = fetchRequest('products').then(res => {\n                this.items = res;\n            });\n            const fetchCategories = fetchRequest('products/categories').then(res => {\n                this.categories = res;\n            });\n            Promise.all([fetchStore, fetchCategories]).then(res => {\n                this.isLoad = false;\n            }).catch(err => {\n                this.isLoad = false;\n                this.isError = true;\n            })\n        },\n        addToCart(item) {\n            store.dispatch({type: \"actionChangeCart\", dataDispatch: {item: item, typeAction: \"addItemToCart\"}});\n\n        },\n        moveToItem() {\n            this.$router.push(\"/item\");\n        },\n        changePage(page) {\n            if(page === \"-\" && this.activePage > 1) {\n                this.activePage -= 1;\n            } else if (page === \"+\" && this.activePage < this.countPages) {\n                this.activePage += 1;\n            } else if(Number(page)) {\n                this.activePage = page;\n            }\n        },\n        addCheckedCategory(e) {\n            if(e.target.checked) {\n                this.checkedCategories.push(e.target.value);\n            } else {\n                this.checkedCategories = this.checkedCategories.filter((category) => category !== e.target.value);\n            }\n        }\n    },\n    created: function() {\n        this.fetchStore();\n        if(this.url_category) {\n            this.checkedCategories.push(this.url_category);\n        }\n    },\n}\n</script>\n\n<style lang=\"less\" scoped>\n    .catalog-page__catalog {\n        display: flex;\n        flex-direction: column;\n        gap: 48px;\n        margin-bottom: 96px;\n    }\n</style>"]},"metadata":{},"sourceType":"module"}